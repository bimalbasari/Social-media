axios.defaults.baseURL = 'http://localhost:4000';
axios.defaults.withCredentials = true;



app.use(cors({
    credentials: true,
    origin: 'http://localhost:5173',
}));


app.put('/places', async (req, res) => {

    const { token } = req.cookies;
    const { id, title, address, addedPhotos, description, perks, extraInfo, checkIn, checkOut, maxGuests, price, } = req.body;


    jwt.verify(token, jwtSecret, {}, async (err, userData) => {
        if (err) throw err;
        const placeDoc = await Place.findById(id);

        if (userData.id === placeDoc.owner.toString()) {


            placeDoc.set({

                title, address, photos: addedPhotos,
                description, perks, extraInfo,
                checkIn, checkOut, maxGuests, price

            });

            await placeDoc.save();
            res.json('ok');
        }
    });

});



app.post('/upload', photosMiddleware.array('photos', 100), (req, res) => {

    const uploadedfiles = [];

    for (let i = 0; i < req.files.length; i++) {
        const { path, originalname } = req.files[i];
        const parts = originalname.split('.');
        const ext = parts[parts.length - 1];
        const newPath = path + '.' + ext;
        fs.renameSync(path, newPath);
        uploadedfiles.push(newPath.replace("uploads\\", ''));

    }
    res.json(uploadedfiles);
});

app.post('/places', (req, res) => {

    const { token } = req.cookies;
    const { title, address, addedPhotos, description, perks, extraInfo, checkIn, checkOut, maxGuests, price } = req.body;
    jwt.verify(token, jwtSecret, {}, async (err, userData) => {
        if (err) throw err;

        const placeDoc = await Place.create({
            owner: userData.id,

            title, address, photos: addedPhotos,
            description, perks, extraInfo,
            checkIn, checkOut, maxGuests, price

        });
        res.json(placeDoc);
    });

});